// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: tours/tours-service.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ToursService_Get_FullMethodName            = "/tours.ToursService/Get"
	ToursService_GetAllByAuthor_FullMethodName = "/tours.ToursService/GetAllByAuthor"
	ToursService_Create_FullMethodName         = "/tours.ToursService/Create"
	ToursService_Update_FullMethodName         = "/tours.ToursService/Update"
	ToursService_Publish_FullMethodName        = "/tours.ToursService/Publish"
	ToursService_Archive_FullMethodName        = "/tours.ToursService/Archive"
)

// ToursServiceClient is the client API for ToursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToursServiceClient interface {
	Get(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*TourResponse, error)
	GetAllByAuthor(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*ToursResponse, error)
	Create(ctx context.Context, in *TourResponse, opts ...grpc.CallOption) (*TourResponse, error)
	Update(ctx context.Context, in *TourResponse, opts ...grpc.CallOption) (*TourResponse, error)
	Publish(ctx context.Context, in *TourResponse, opts ...grpc.CallOption) (*TourResponse, error)
	Archive(ctx context.Context, in *TourResponse, opts ...grpc.CallOption) (*TourResponse, error)
}

type toursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToursServiceClient(cc grpc.ClientConnInterface) ToursServiceClient {
	return &toursServiceClient{cc}
}

func (c *toursServiceClient) Get(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, ToursService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetAllByAuthor(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*ToursResponse, error) {
	out := new(ToursResponse)
	err := c.cc.Invoke(ctx, ToursService_GetAllByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) Create(ctx context.Context, in *TourResponse, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, ToursService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) Update(ctx context.Context, in *TourResponse, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, ToursService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) Publish(ctx context.Context, in *TourResponse, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, ToursService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) Archive(ctx context.Context, in *TourResponse, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, ToursService_Archive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToursServiceServer is the server API for ToursService service.
// All implementations must embed UnimplementedToursServiceServer
// for forward compatibility
type ToursServiceServer interface {
	Get(context.Context, *UserIdRequest) (*TourResponse, error)
	GetAllByAuthor(context.Context, *UserIdRequest) (*ToursResponse, error)
	Create(context.Context, *TourResponse) (*TourResponse, error)
	Update(context.Context, *TourResponse) (*TourResponse, error)
	Publish(context.Context, *TourResponse) (*TourResponse, error)
	Archive(context.Context, *TourResponse) (*TourResponse, error)
	mustEmbedUnimplementedToursServiceServer()
}

// UnimplementedToursServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToursServiceServer struct {
}

func (UnimplementedToursServiceServer) Get(context.Context, *UserIdRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedToursServiceServer) GetAllByAuthor(context.Context, *UserIdRequest) (*ToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByAuthor not implemented")
}
func (UnimplementedToursServiceServer) Create(context.Context, *TourResponse) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedToursServiceServer) Update(context.Context, *TourResponse) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedToursServiceServer) Publish(context.Context, *TourResponse) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedToursServiceServer) Archive(context.Context, *TourResponse) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (UnimplementedToursServiceServer) mustEmbedUnimplementedToursServiceServer() {}

// UnsafeToursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToursServiceServer will
// result in compilation errors.
type UnsafeToursServiceServer interface {
	mustEmbedUnimplementedToursServiceServer()
}

func RegisterToursServiceServer(s grpc.ServiceRegistrar, srv ToursServiceServer) {
	s.RegisterService(&ToursService_ServiceDesc, srv)
}

func _ToursService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).Get(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetAllByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetAllByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetAllByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetAllByAuthor(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).Create(ctx, req.(*TourResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).Update(ctx, req.(*TourResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).Publish(ctx, req.(*TourResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_Archive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).Archive(ctx, req.(*TourResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// ToursService_ServiceDesc is the grpc.ServiceDesc for ToursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tours.ToursService",
	HandlerType: (*ToursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ToursService_Get_Handler,
		},
		{
			MethodName: "GetAllByAuthor",
			Handler:    _ToursService_GetAllByAuthor_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ToursService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ToursService_Update_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ToursService_Publish_Handler,
		},
		{
			MethodName: "Archive",
			Handler:    _ToursService_Archive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours/tours-service.proto",
}
